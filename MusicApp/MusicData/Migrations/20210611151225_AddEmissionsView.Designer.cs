// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicApp.MusicData;

namespace MusicApp.MusicData.Migrations
{
    [DbContext(typeof(MusicDataDbContext))]
    [Migration("20210611151225_AddEmissionsView")]
    partial class AddEmissionsView
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("music")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ArtistSong", b =>
                {
                    b.Property<int>("ArtistsArtistId")
                        .HasColumnType("int");

                    b.Property<int>("SongsSongId")
                        .HasColumnType("int");

                    b.HasKey("ArtistsArtistId", "SongsSongId");

                    b.HasIndex("SongsSongId");

                    b.ToTable("ArtistSong");
                });

            modelBuilder.Entity("MusicApp.MusicData.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Born")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pseudonym")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MusicApp.MusicData.Emission", b =>
                {
                    b.Property<int>("EmissionId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("EmittedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("RadioChannelId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("EmissionId");

                    b.HasIndex("RadioChannelId");

                    b.HasIndex("SongId");

                    b.ToTable("Emissions");
                });

            modelBuilder.Entity("MusicApp.MusicData.RadioChannel", b =>
                {
                    b.Property<int>("RadioChannelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Mhz")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RadioChannelId");

                    b.ToTable("RadioChannels");
                });

            modelBuilder.Entity("MusicApp.MusicData.Song", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SongId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("MusicApp.MusicData.Views.CountByChannelView", b =>
                {
                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.ToView("vCountByChannel");
                });

            modelBuilder.Entity("MusicApp.MusicData.Views.CountByYearView", b =>
                {
                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.ToView("vCountByYear");
                });

            modelBuilder.Entity("MusicApp.MusicData.Views.EmissionsView", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChannelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("EmittedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SongTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SongId");

                    b.ToView("vEmissions");
                });

            modelBuilder.Entity("ArtistSong", b =>
                {
                    b.HasOne("MusicApp.MusicData.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApp.MusicData.Song", null)
                        .WithMany()
                        .HasForeignKey("SongsSongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MusicApp.MusicData.Emission", b =>
                {
                    b.HasOne("MusicApp.MusicData.RadioChannel", "RadioChannel")
                        .WithMany()
                        .HasForeignKey("RadioChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicApp.MusicData.Song", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RadioChannel");

                    b.Navigation("Song");
                });
#pragma warning restore 612, 618
        }
    }
}
